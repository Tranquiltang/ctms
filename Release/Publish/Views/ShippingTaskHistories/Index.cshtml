@model WebApp.Models.ShippingTaskHistory
@{
  ViewBag.Title = "派车状态历史记录";
}
<!-- MAIN CONTENT -->
<div id="content">
  <!-- quick navigation bar -->
  <div class="row">
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
      <h1 class="page-title txt-color-blueDark">
        <i class="fa fa-table fa-fw "></i>
        调度管理
        <span>
          >
          派车状态历史记录
        </span>
      </h1>
    </div>
    <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

    </div>
  </div>
  <!-- end quick navigation bar -->
  <!-- widget grid -->
  <section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
      <!-- NEW WIDGET START -->
      <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <!-- Widget ID (each widget will need unique ID)-->
        <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
          <!-- widget options:
          usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
          data-widget-colorbutton="false"
          data-widget-editbutton="false"
          data-widget-togglebutton="false"
          data-widget-deletebutton="false"
          data-widget-fullscreenbutton="false"
          data-widget-custombutton="false"
          data-widget-collapsed="true"
          data-widget-sortable="false"
          -->
          <header>
            <span class="widget-icon"> <i class="fa fa-table"></i> </span>
            <h2>派车状态历史记录</h2>
          </header>

          <!-- widget div-->
          <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
              <!-- This area used as dropdown edit box -->
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body no-padding">
              <div class="sk-spinner sk-spinner-wave">
                <div class="sk-rect1"></div>
                <div class="sk-rect2"></div>
                <div class="sk-rect3"></div>
                <div class="sk-rect4"></div>
                <div class="sk-rect5"></div>
              </div>
              <div class="widget-body-toolbar">
                <div class="row">
                  <div class="col-sm-8  ">
                    <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->

                    <div class="btn-group btn-group-sm">
                      <button onclick="reload()" class="btn btn-default"> <i class="fa fa-refresh"></i> @Html.L("Refresh") </button>
                    </div>

                    <div class="btn-group btn-group-sm hidden-xs hidden-md">
                      <button onclick="exportexcel()" class="btn btn-default"> <i class="fa fa-file-excel-o"></i> @Html.L("Export") </button>
                    </div>
                    <div class="btn-group btn-group-sm visible-lg-inline-block">
                      <button onclick="print()" class="btn btn-default"> <i class="fa fa-print"></i> @Html.L("Print") </button>
                    </div>
                    <div class="btn-group btn-group-sm visible-lg-inline-block">
                      <button onclick="dohelp()" class="btn btn-default"> <i class="fa fa-question-circle-o"></i> @Html.L("Help") </button>
                    </div>
                  </div>
                  <div class="col-sm-4 text-align-right visible-lg-inline-block">
                    <div class="btn-group btn-group-sm">
                      <button onclick="window.history.back()" class="btn btn-sm btn-success"> <i class="fa fa-chevron-left"></i> @Html.L("GoBack") </button>
                    </div>
                  </div>
                </div>

              </div>
              <div class="alert alert-warning no-margin fade in">
                <button class="close" data-dismiss="alert">
                  ×
                </button>
                <i class="fa-fw fa fa-info"></i>
                注意事项:
              </div>
              <!--begin datagrid-content -->
              <div class="table-responsive">
                <table id="shippingtaskhistories_datagrid"></table>
              </div>
              <!--end datagrid-content -->
            </div>
            <!-- end widget content -->
          </div>
          <!-- end widget div -->
        </div>
        <!-- end widget -->
      </article>
      <!-- WIDGET END -->
    </div>
    <!-- end row -->
  </section>
  <!-- end widget grid -->
  <!-- file upload partial view -->
  @Html.Partial("_ImportWindow", new ViewDataDictionary { { "EntityName", "ShippingTaskHistory" } })
  <!-- end file upload partial view -->
  <!-- detail popup window -->
  @Html.Partial("_PopupDetailFormView", new WebApp.Models.ShippingTaskHistory())
  <!-- end detail popup window -->

</div>
<!-- END MAIN CONTENT -->

@section Scripts {
  <script type="text/javascript">
      //是否启用弹窗口模式新增编辑数据
      const POPUPMODE = false;
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = true;
      //上传导入参数设定
      const entityname = "ShippingTaskHistory";
      var shippingtaskhistory = {};

      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/ShippingTaskHistory.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');
                })
           .fail(() => {
               $.messager.alert('失败','没有下载到导入模板[ShippingTaskHistory.xlsx]文件!','error');
            });
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
        //打开Excel上传窗口
	   function importexcel() {
		    $('#importwindow').window('open');
	   }
	   //执行导出下载Excel
	   function exportexcel() {
				const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
				//console.log(filterRules);
				$.messager.progress({ title: '正在执行导出!' });
				let formData = new FormData();
				formData.append('filterRules', filterRules);
				formData.append('sort', 'Id');
				formData.append('order', 'asc');
				$.postDownload('/ShippingTaskHistories/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('失败', err.statusText, 'error');
                });

		}
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');
        }
       var editIndex = undefined;
       //重新加载数据
	   function reload() {
			if (endEditing()) {
			    $dg.datagrid('reload');
		    }
	   }
      //关闭编辑状态
	  function endEditing() {
			if (editIndex === undefined) {
                return true;
            }
			if ($dg.datagrid('validateRow', editIndex)) {
				$dg.datagrid('endEdit', editIndex);
				editIndex = undefined;
                return true;
			} else {
				const invalidinput = $('input.validatebox-invalid','.datagrid');
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
				return false;
			}
		}
    //单击列开启编辑功能
	function onClickCell(index, field) {
        shippingtaskhistory = $dg.datagrid('getRows')[index];
	    const _operates = ['_operate1', 'ck'];
		if (!EDITINLINE || $.inArray(field, _operates) >= 0) {
				return;
		}
		if (editIndex !== index) {
		    if (endEditing()) {
			    $dg.datagrid('selectRow', index)
				   .datagrid('beginEdit', index);
                hook = true;
                editIndex = index;
				const ed = $dg.datagrid('getEditor', { index: index, field: field });
				if (ed) {
						($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
				}
			} else {
				$dg.datagrid('selectRow', editIndex);
			}
		}
	}
    //新增记录
  function append() {
    const item = {
      ZPCLX: '1',
      ZCPH: '-',
      ZCBH: '-',
      ZCZT: 0,
      ZBZ: '',
      ZQSD: '',
      ZQSDMS: '',
      ZMDD: '',
      ZMDDMS: '',
      TmNumbers: '',
      TmContainers: '',
    };
    if (POPUPMODE) {
      //弹出新增窗口
      showPopupCreateWindow(item);
    } else {
      if (endEditing()) {
        //对必填字段进行默认值初始化
        $dg.datagrid('insertRow',
          {
            index: 0,
            row: item
          });
        editIndex = 0;
        $dg.datagrid('selectRow', editIndex)
          .datagrid('beginEdit', editIndex);
        hook = true;
      }
    }
  }
    //删除编辑的行
	function removeit() {
       if (EDITINLINE) {
          if ($dg.datagrid('getChecked').length > 0) {
            deletechecked();
            return;
          }
          if (editIndex !== undefined) {
    			$dg.datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
			   editIndex = undefined;
               hook = true;
           }else{
              const row = $dg.datagrid('getSelected');
              if(row){
                const rowindex = $dg.datagrid('getRowIndex', row);
                $dg.datagrid('deleteRow', rowindex);
                hook = true;
              }else{
                $.messager.alert('提示', '请选中需要删除的记录.', 'info');
              }
           }
        } else {
		   if ($dg.datagrid('getChecked').length > 0) {
              deletechecked();
           }
           else {
              $.messager.alert('提示', '请选中需要删除的记录.', 'info');
           }
        }
	}
    //删除该行
    function deleteRow(id) {
          $.messager.confirm('确认', '你确定要删除该记录?', result => {
                if (result) {
                    $.post('/ShippingTaskHistories/DeleteCheckedAsync', { id: [id] })
                         .done(response => {
                                if (response.success) {
                                    toastr.success('删除成功');
                                    $dg.datagrid('uncheckAll');
                                    $dg.datagrid('reload');
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						        $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					      });
                    }
                });

     }
    //删除选中的行
    function deletechecked() {
        const rows = $dg.datagrid('getChecked');
        if (rows.length > 0) {
            const id = rows.filter(item=>item.Id!=null).map(item => {
                   return item.Id;
                });
            $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    $.post('/ShippingTaskHistories/DeleteCheckedAsync', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.success('删除成功');
                                    $dg.datagrid('uncheckAll');
                                    $dg.datagrid('reload');
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						     $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					      });
                    }
                });
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //提交保存后台数据库
	function accept() {
	  if (endEditing()) {
		if ($dg.datagrid('getChanges').length > 0) {
		  const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
		$.post('/ShippingTaskHistories/SaveDataAsync', {shippingtaskhistories:changed})
                     .done(response => {
						   //console.log(response);
						   if (response.success) {
							   toastr.success('保存成功');
							   $dg.datagrid('acceptChanges');
							   $dg.datagrid('reload');
                               hook = false;
						   } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
					    })
                      .fail((jqXHR, textStatus, errorThrown) => {
						$.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					  });
				}
			}
	}
	function reject() {
	    $dg.datagrid('rejectChanges');
	    editIndex = undefined;
        hook = false;
	}
	function getChanges() {
	    const rows = $dg.datagrid('getChanges');
		//console.log(rows.length + ' rows are changed!');
	}
    //弹出明细信息
  function showDetailsWindow(id, row, index) {
    if (REQUIRBACKEND) {
      //console.log(index, row);
      $.get('/ShippingTaskHistories/PopupEditAsync/' + id)
        .done(data => {
          //console.log(data);
          loadData(id, data, 'Modified');
        })
        .fail((jqXHR, textStatus, errorThrown) => {
          $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
        });
    } else {
      loadData(id, JSON.parse(row), 'Modified');
    }
  }
    //弹出新建窗口
  function showPopupCreateWindow(item) {
    //获取初始化对象
    if (REQUIRBACKEND) {
      $.get('/ShippingTaskHistories/PopupCreate')
        .done(data => {
          loadData(-1, data, 'Added');
        })
        .fail((jqXHR, textStatus, errorThrown) => {
          $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
        });
    } else {
      loadData(-1, item, 'Added');
    }
  }
    //初始化定义datagrid
    var $dg = $('#shippingtaskhistories_datagrid');
  $(() => {
    //定义datagrid结构
    $dg.datagrid({
      rownumbers: true,
      checkOnSelect: false,
      selectOnCheck: false,
      idField: 'Id',
      sortName: 'Id',
      sortOrder: 'desc',
      remoteFilter: true,
      singleSelect: true,
      url: '/ShippingTaskHistories/GetDataAsync',
      method: 'get',
      onClickCell: onClickCell,
      pagination: true,
      striped: true,
      onBeforeLoad: function () {
        //datagrid resize when jarvisWidgets resized.
        const that = $(this);
        $(window).on("resize.jarvisWidgets", () => {
          that.datagrid('resize');
        })
      },
      onSelect: function (index, row) {
        shippingtaskhistory = row;
      },
      onBeginEdit: function (index, row) {

      },
      onEndEdit: function (index, row) {

      },
      onBeforeEdit: function (index, row) {
        row.editing = true;
        $(this).datagrid('refreshRow', index);
      },
      onAfterEdit: function (index, row) {
        row.editing = false;
        $(this).datagrid('refreshRow', index);
      },
      onCancelEdit: function (index, row) {
        row.editing = false;
        $(this).datagrid('refreshRow', index);
      },
      frozenColumns: [[
        /*开启CheckBox选择功能*/
        { field: 'ck', checkbox: true },
        {
          field: '_operate1',
          title: '@Html.L("Command")',
          width: 55,
          sortable: false,
          resizable: true,
          formatter: function showdetailsformatter(value, row, index) {
            if (!row.editing) {
              return '<div class="btn-group">\
                        <button onclick="showDetailsWindow(\'' + row.Id + '\',\'' + JSON.stringify(row).replace(/\"/g, '&quot;') + '\',' + index + ')" class="btn btn-default btn-xs" title="显示地图位置" ><i class="fa  fa-map-marker"></i> </button>\
                     </div>';
            } else {
              return '<button class="btn btn-default btn-xs" disabled title="显示地图位置"  ><i class="fa fa-pencil-square-o"></i> </button>';
            }
          }
        }
      ]],
      columns: [[
        { /*Id*/
          field: 'Id',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
          width: 120,
          sortable: true,
          resizable: true,
          hidden: true
        },
        {    /*派车单号*/
          field: 'ShipOrderNo',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ShipOrderNo)</span>',
          width: 130,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ShipOrderNo)', required: true, validType: 'length[8,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*派车类型*/
          field: 'ZPCLX',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZPCLX)</span>',
          width: 130,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZPCLX)', required: true, validType: 'length[1,2]' }
          },
          sortable: true,
          resizable: true,
          formatter: transportationformatter
        },
        {    /*车牌号*/
          field: 'ZCPH',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZCPH)</span>',
          width: 130,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZCPH)', required: true, validType: 'length[1,10]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*车板号*/
          field: 'ZCBH',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZCBH)</span>',
          width: 130,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZCBH)', required: true, validType: 'length[7,10]' }
          },
          sortable: true,
          resizable: true
        },
        {   /*记录时间*/
          field: 'TransactionDateTime',
          title: '<span class="required">@Html.DisplayNameFor(model => model.TransactionDateTime)</span>',
          width: 160,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datetimebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.TransactionDateTime)', required: true }
          },
          formatter: datetimeformatter,
          sortable: true,
          resizable: true
        },
        {     /*派车状态*/
          field: 'ZCZT',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZCZT)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberbox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.ZCZT)',
              required: true,
              validType: 'integer',

            }
          },
          formatter: tmstatusformatter,
          sortable: true,
          resizable: true
        },
        {    /*备注*/
          field: 'ZBZ',
          title: '@Html.DisplayNameFor(model => model.ZBZ)',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZBZ)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*起始地*/
          field: 'ZQSD',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZQSD)</span>',
          width: 130,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZQSD)', required: true, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*起始地描述*/
          field: 'ZQSDMS',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZQSDMS)</span>',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZQSDMS)', required: true, validType: 'length[0,80]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*目的地*/
          field: 'ZMDD',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZMDD)</span>',
          width: 130,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZMDD)', required: true, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*目的地描述*/
          field: 'ZMDDMS',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ZMDDMS)</span>',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ZMDDMS)', required: true, validType: 'length[0,80]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*配载订单号*/
          field: 'TmNumbers',
          title: '@Html.DisplayNameFor(model => model.TmNumbers)',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.TmNumbers)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*配载集装箱号*/
          field: 'TmContainers',
          title: '@Html.DisplayNameFor(model => model.TmContainers)',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.TmContainers)', required: false, validType: 'length[0,80]' }
          },
          sortable: true,
          resizable: true
        },

        {    /*经度*/
          field: 'Long',
          title: '@Html.DisplayNameFor(model => model.Long)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberbox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Long)',
              required: false,
              precision: 2,
              validType: 'decimal',

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*维度*/
          field: 'Lat',
          title: '@Html.DisplayNameFor(model => model.Lat)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberbox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Lat)',
              required: false,
              precision: 2,
              validType: 'decimal',

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*地图位置*/
          field: 'Location',
          title: '@Html.DisplayNameFor(model => model.Location)',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Location)', required: false, validType: 'length[0,100]' }
          },
          sortable: true,
          resizable: true
        },
      ]]
    });

    $dg.datagrid('enableFilter', [
      {   /*Id*/
        field: 'Id',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*派车状态*/
        field: 'ZCZT',
        type: 'tmstatusfilter'
      },
      {   /*派车状态*/
        field: 'ZPCLX',
        type: 'transportationfilter'
      },
      {   /*经度*/
        field: 'Long',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*维度*/
        field: 'Lat',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {     /*记录时间*/
        field: 'TransactionDateTime',
        type: 'dateRange',
        options: {
          onChange: value => {
            $dg.datagrid('addFilterRule', {
              field: 'TransactionDateTime',
              op: 'between',
              value: value
            });

            $dg.datagrid('doFilter');
          }
        }
      },
    ]);
  });

  </script>
  <!--begin popup detailview javascript block -->
  <script src="https://webapi.amap.com/maps?v=1.4.13&key=4aadb4b9c951ee269cea29368fd9a4c3&plugin=AMap.TruckDriving"></script>
  <script type="text/javascript">
    //判断新增编辑状态
    var MODELSTATE = 'Added';
    var shippingtaskhistoryid = null;
    var hasChanged = false;
    function loadData(id, data, state) {
      MODELSTATE = state;
      shippingtaskhistoryid = id;
      $("#detailswindow").window("open");
      $('#shippingtaskhistory_form').form('reset');
      $('#shippingtaskhistory_form').form('load', data);
      $('#shippingtaskhistory_form :input').attr('disabled', 'disabled');
    }
    var $editform = $('#shippingtaskhistory_form');
    //async 保存数据
    async function saveitem() {
      if ($editform.form('enableValidation').form('validate')) {
        let shippingtaskhistory = $editform.serializeJSON();
        let url = '/ShippingTaskHistories/EditAsync';
        //判断是新增或是修改方法
        if (MODELSTATE === 'Added') {
          url = '/ShippingTaskHistories/CreateAsync';
        }
        var token = $('input[name="__RequestVerificationToken"]', $editform).val();
        $.ajax({
          type: "POST",
          url: url,
          data: {
            __RequestVerificationToken: token,
            shippingtaskhistory: shippingtaskhistory
          },
          dataType: 'json',
          contentType: 'application/x-www-form-urlencoded; charset=utf-8'
        })
          .done(response => {
            if (response.success) {
              hasChanged = false;
              $editform.form('disableValidation');
              $dg.datagrid('reload');
              $('#detailswindow').window("close");
              toastr.success("保存成功");
            } else {
              $.messager.alert("错误", response.err, "error");
            }
          })
          .fail((jqXHR, textStatus, errorThrown) => {
            $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
          });
      }
    }
    //关闭窗口
    function closewindow() {
      $('#detailswindow').window('close');
    }
    //todo
    function todo() {
      console.log('todo.....');
    }
    //判断是否有没有保存的记录
    function hasmodified() {
      return hasChanged;

    }

    //回车光标移动到下个输入控件
    $(() => {
      //如果是枚举类型需要把numberbox改成combobox
      //派车状态
      $('#ZCZT').numberbox('textbox').bind('keydown', function (e) {
        if (e.keyCode == 13) {
          $(e.target).emulateTab();
        }
      });
      //如果是枚举类型需要把numberbox改成combobox
      //经度
      $('#Long').numberbox('textbox').bind('keydown', function (e) {
        if (e.keyCode == 13) {
          $(e.target).emulateTab();
        }
      });
      //如果是枚举类型需要把numberbox改成combobox
      //维度
      $('#Lat').numberbox('textbox').bind('keydown', function (e) {
        if (e.keyCode == 13) {
          $(e.target).emulateTab();
        }
      });
      //日期类型 记录时间
      $('#TransactionDateTime').datebox('textbox').bind('keydown', function (e) {
        if (e.keyCode == 13) {
          $(e.target).emulateTab();
        }
      });
    });
  </script>


  <!--end popup detailview javascript block -->
  <script src="~/Scripts/jquery.filerupload.min.js"></script>
}


