@model WebApp.Models.Attachment
@{
  ViewBag.Title = "附件管理";
}
<!-- MAIN CONTENT -->
<div id="content">
  <!-- quick navigation bar -->
  <div class="row">
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
      <h1 class="page-title txt-color-blueDark">
        <i class="fa fa-table fa-fw "></i>
        调度管理
        <span>
          >
          附件管理
        </span>
      </h1>
    </div>
    <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

    </div>
  </div>
  <!-- end quick navigation bar -->
  <!-- widget grid -->
  <section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
      <!-- NEW WIDGET START -->
      <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <!-- Widget ID (each widget will need unique ID)-->
        <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
          <!-- widget options:
          usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
          data-widget-colorbutton="false"
          data-widget-editbutton="false"
          data-widget-togglebutton="false"
          data-widget-deletebutton="false"
          data-widget-fullscreenbutton="false"
          data-widget-custombutton="false"
          data-widget-collapsed="true"
          data-widget-sortable="false"
          -->
          <header>
            <span class="widget-icon"> <i class="fa fa-table"></i> </span>
            <h2>附件管理</h2>
          </header>

          <!-- widget div-->
          <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
              <!-- This area used as dropdown edit box -->
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body no-padding">
              <div class="sk-spinner sk-spinner-wave">
                <div class="sk-rect1"></div>
                <div class="sk-rect2"></div>
                <div class="sk-rect3"></div>
                <div class="sk-rect4"></div>
                <div class="sk-rect5"></div>
              </div>
              <div class="widget-body-toolbar">
                <div class="row">
                  <div class="col-sm-8  ">
                    <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->
                    <div class="btn-group btn-group-sm">
                      <button onclick="append()" class="btn btn-default"> <i class="fa fa-plus"></i> @Html.L("Add") </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button onclick="removeit()" class="btn btn-default"> <i class="fa fa-trash-o"></i> @Html.L("Delete") </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button onclick="accept()" class="btn btn-default"> <i class="fa fa-floppy-o"></i> @Html.L("Save") </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button onclick="reject()" class="btn btn-default"> <i class="fa fa-ban"></i> @Html.L("Cancel") </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button onclick="reload()" class="btn btn-default"> <i class="fa fa-refresh"></i> @Html.L("Refresh") </button>
                    </div>
                    <div class="btn-group btn-group-sm hidden-xs">
                      <button type="button" onclick="importexcel()" class="btn btn-default"><i class="fa fa-cloud-upload"></i> @Html.L("Import") </button>
                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="caret"></span>
                        <span class="sr-only">Toggle Dropdown</span>
                      </button>
                      <ul class="dropdown-menu">
                        <li><a href="javascript:importexcel()"><i class="fa fa-file-excel-o"></i>  @Html.L("Upload") </a></li>
                        <li role="separator" class="divider"></li>
                        <li><a href="javascript:downloadtemplate()"><i class="fa fa-download"></i> @Html.L("Download") </a></li>
                      </ul>
                    </div>
                    <div class="btn-group btn-group-sm hidden-xs hidden-md">
                      <button onclick="exportexcel()" class="btn btn-default"> <i class="fa fa-file-excel-o"></i> @Html.L("Export") </button>
                    </div>
                    <div class="btn-group btn-group-sm visible-lg-inline-block">
                      <button onclick="print()" class="btn btn-default"> <i class="fa fa-print"></i> @Html.L("Print") </button>
                    </div>
                    <div class="btn-group btn-group-sm visible-lg-inline-block">
                      <button onclick="dohelp()" class="btn btn-default"> <i class="fa fa-question-circle-o"></i> @Html.L("Help") </button>
                    </div>
                  </div>
                  <div class="col-sm-4 text-align-right visible-lg-inline-block">
                    <div class="btn-group btn-group-sm">
                      <button onclick="window.history.back()" class="btn btn-sm btn-success"> <i class="fa fa-chevron-left"></i> @Html.L("GoBack") </button>
                    </div>
                  </div>
                </div>

              </div>
              <div class="alert alert-warning no-margin fade in">
                <button class="close" data-dismiss="alert">
                  ×
                </button>
                <i class="fa-fw fa fa-info"></i>
                注意事项:
              </div>
              <!--begin datagrid-content -->
              <div class="table-responsive">
                <table id="attachments_datagrid"></table>
              </div>
              <!--end datagrid-content -->
            </div>
            <!-- end widget content -->
          </div>
          <!-- end widget div -->
        </div>
        <!-- end widget -->
      </article>
      <!-- WIDGET END -->
    </div>
    <!-- end row -->
  </section>
  <!-- end widget grid -->
  <!-- file upload partial view -->
  @Html.Partial("_ImportWindow", new ViewDataDictionary { { "EntityName", "Attachment" } })
  <!-- end file upload partial view -->
  <!-- detail popup window -->
  @Html.Partial("_PopupDetailFormView", new WebApp.Models.Attachment())
  <!-- end detail popup window -->

</div>
<!-- END MAIN CONTENT -->
<link href="~/Scripts/plugin/fancybox/jquery.fancybox.min.css" rel="stylesheet" />
@section Scripts {
  <script src="~/Scripts/plugin/jquery.serializfiles/jquery.form.serializefiles.js"></script>
  <script src="~/Scripts/plugin/fancybox/jquery.fancybox.min.js"></script>
 
  <script type="text/javascript">
      //是否启用弹窗口模式新增编辑数据
      const POPUPMODE = true;
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = false;
      //上传导入参数设定
      const entityname = "Attachment";
      var attachment = {};

      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/Attachment.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');
                })
           .fail(() => {
               $.messager.alert('失败','没有下载到导入模板[Attachment.xlsx]文件!','error');
            });
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
        //打开Excel上传窗口
	   function importexcel() {
		    $('#importwindow').window('open');
	   }
	   //执行导出下载Excel
	   function exportexcel() {
				const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
				//console.log(filterRules);
				$.messager.progress({ title: '正在执行导出!' });
				let formData = new FormData();
				formData.append('filterRules', filterRules);
				formData.append('sort', 'Id');
				formData.append('order', 'asc');
				$.postDownload('/Attachments/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('失败', err.statusText, 'error');
                });

		}
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');
        }
       var editIndex = undefined;
       //重新加载数据
	   function reload() {
			if (endEditing()) {
			    $dg.datagrid('reload');
		    }
	   }
      //关闭编辑状态
	  function endEditing() {
			if (editIndex === undefined) {
                return true;
            }
			if ($dg.datagrid('validateRow', editIndex)) {
				$dg.datagrid('endEdit', editIndex);
				editIndex = undefined;
                return true;
			} else {
				const invalidinput = $('input.validatebox-invalid','.datagrid');
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
				return false;
			}
		}
    //单击列开启编辑功能
	function onClickCell(index, field) {
        attachment = $dg.datagrid('getRows')[index];
	    const _operates = ['_operate1', 'ck'];
		if (!EDITINLINE || $.inArray(field, _operates) >= 0) {
				return;
		}
		if (editIndex !== index) {
		    if (endEditing()) {
			    $dg.datagrid('selectRow', index)
				   .datagrid('beginEdit', index);
                hook = true;
                editIndex = index;
				const ed = $dg.datagrid('getEditor', { index: index, field: field });
				if (ed) {
						($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
				}
			} else {
				$dg.datagrid('selectRow', editIndex);
			}
		}
	}
    //新增记录
	function append() {
        const item= { ShipOrderNo: '-',
TRQ_ID: '-',
          TOR_ID: '-',
          FileType: 'png',
          FileName:'xxxx.xxx',
          User: $.getUserName(),
UploadDateTime: moment().format('YYYY-MM-DD HH:mm:00'),
 };
        if (POPUPMODE) {
            //弹出新增窗口
            showPopupCreateWindow(item);
        } else {
			if (endEditing()) {
				//对必填字段进行默认值初始化
				$dg.datagrid('insertRow',
                              {
                                  index: 0,
                                  row: item
                               });
				editIndex = 0;
				$dg.datagrid('selectRow', editIndex)
					.datagrid('beginEdit', editIndex);
                hook = true;
			}
        }
	}
    //删除编辑的行
	function removeit() {
       if (EDITINLINE) {
          if ($dg.datagrid('getChecked').length > 0) {
            deletechecked();
            return;
          }
          if (editIndex !== undefined) {
    			$dg.datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
			   editIndex = undefined;
               hook = true;
           }else{
              const row = $dg.datagrid('getSelected');
              if(row){
                const rowindex = $dg.datagrid('getRowIndex', row);
                $dg.datagrid('deleteRow', rowindex);
                hook = true;
              }else{
                $.messager.alert('提示', '请选中需要删除的记录.', 'info');
              }
           }
        } else {
		   if ($dg.datagrid('getChecked').length > 0) {
              deletechecked();
           }
           else {
              $.messager.alert('提示', '请选中需要删除的记录.', 'info');
           }
        }
	}
    //删除该行
    function deleteRow(id) {
          $.messager.confirm('确认', '你确定要删除该记录?', result => {
                if (result) {
                    $.post('/Attachments/DeleteCheckedAsync', { id: [id] })
                         .done(response => {
                                if (response.success) {
                                    toastr.success('删除成功');
                                    $dg.datagrid('uncheckAll');
                                    $dg.datagrid('reload');
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						        $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					      });
                    }
                });

     }
    //删除选中的行
    function deletechecked() {
        const rows = $dg.datagrid('getChecked');
        if (rows.length > 0) {
            const id = rows.filter(item=>item.Id!=null).map(item => {
                   return item.Id;
                });
            $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    $.post('/Attachments/DeleteCheckedAsync', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.success('删除成功');
                                    $dg.datagrid('uncheckAll');
                                    $dg.datagrid('reload');
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						     $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					      });
                    }
                });
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //提交保存后台数据库
	function accept() {
	  if (endEditing()) {
		if ($dg.datagrid('getChanges').length > 0) {
		  const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
		$.post('/Attachments/SaveDataAsync', {attachments:changed})
                     .done(response => {
						   //console.log(response);
						   if (response.success) {
							   toastr.success('保存成功');
							   $dg.datagrid('acceptChanges');
							   $dg.datagrid('reload');
                               hook = false;
						   } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
					    })
                      .fail((jqXHR, textStatus, errorThrown) => {
						$.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					  });
				}
			}
	}
	function reject() {
	    $dg.datagrid('rejectChanges');
	    editIndex = undefined;
        hook = false;
	}
	function getChanges() {
	    const rows = $dg.datagrid('getChanges');
		//console.log(rows.length + ' rows are changed!');
	}
    //弹出明细信息
    function showDetailsWindow(id, row, index) {
      row = JSON.parse(row);
      if (row.FileType == ".pdf") {
        $.fancybox.open({
          //'orig'			: $(this),
          'padding': 0,
          'src': row.FilePath,
          opts: {
            'caption': `FWO:${row.TOR_ID} 派车单号:${row.ShipOrderNo} 备注:${row.Comment}`,
            'transitionIn': 'elastic',
            'transitionOut': 'elastic',
            'type': 'iframe',
            iframe: {
              preload: false
            }
          }
          
        });
      } else {
        $.fancybox.open({
          src: row.FilePath,
          opts: {
            caption: `FWO:${row.TOR_ID} 派车单号:${row.ShipOrderNo} 备注:${row.Comment}`,
            thumb: row.FilePath
          }
        });
         
      }
    
	}
    //弹出新建窗口
    function showPopupCreateWindow(item) {
        //获取初始化对象
        if (REQUIRBACKEND) {
            $.get('/Attachments/PopupCreate')
                .done(data => {
                    loadData(-1,data,'Added');
                 })
                .fail((jqXHR, textStatus, errorThrown) => {
                    $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                });
        } else {
           loadData(-1, item,'Added');
        }
    }
    //初始化定义datagrid
    var $dg = $('#attachments_datagrid');
    $(() => {
		 //定义datagrid结构
         $dg.datagrid({
                        rownumbers:true,
				        checkOnSelect:false,
				        selectOnCheck:false,
				        idField:'Id',
				        sortName:'Id',
				        sortOrder:'desc',
				        remoteFilter: true,
				        singleSelect: true,
                        url: '/Attachments/GetDataAsync',
				        method: 'get',
				        onClickCell: onClickCell,
				        pagination: true,
                        striped:true,
                        onBeforeLoad: function () {
                           //datagrid resize when jarvisWidgets resized.
                           const that = $(this);
                           $(window).on("resize.jarvisWidgets", () => {
                               that.datagrid('resize');
                           })
                         },
				        onSelect: function(index,row) {
                           attachment = row;
                        },
                        onBeginEdit: function (index, row) {

                         },
                        onEndEdit: function (index, row) {

                         },
                         onBeforeEdit: function (index, row) {
                            row.editing = true;
                            $(this).datagrid('refreshRow', index);
                          },
                          onAfterEdit: function (index, row) {
                            row.editing = false;
                            $(this).datagrid('refreshRow', index);
                           },
                           onCancelEdit: function (index, row) {
                             row.editing = false;
                             $(this).datagrid('refreshRow', index);
                         },
                        frozenColumns: [[
                         /*开启CheckBox选择功能*/
                         { field: 'ck', checkbox: true },
                         {
                            field: '_operate1',
                            title:'@Html.L("Command")',
                            width: 85,
                            sortable: false,
                            resizable: true,
                            formatter: function showdetailsformatter(value, row, index) {
                                        if (!row.editing) {
                                             return '<div class="btn-group">\
                                                         <button onclick="showDetailsWindow(\'' + row.Id + '\',\'' + JSON.stringify(row).replace(/\"/g, '&quot;') + '\',' + index +')" class="btn btn-default btn-xs" title="预览图片" ><i class="fa fa-file-image-o"></i> </button>\
                                                         <button onclick="deleteRow(\'' + row.Id + '\',\'' + JSON.stringify(row).replace(/\"/g, '&quot;') + '\',' + index +')" class="btn btn-default btn-xs" title="删除记录" ><i class="fa fa-trash-o"></i> </button>\
                                                      </div>';
                                         } else {
                                              return '<button class="btn btn-default btn-xs" disabled title="查看明细"  ><i class="fa fa-pencil-square-o"></i> </button>';
                                         }
                                     }
                          }
                        ]],
                        columns: [[
		     { /*Id*/
               field:'Id',
               title:'<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
               width:120 ,
               sortable:true,
               resizable:true,
               hidden:true
              },
			{    /*派车单号*/
                 field:'ShipOrderNo',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.ShipOrderNo)</span>',
                 width:130,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.ShipOrderNo)',required:true, validType: 'length[8,20]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*FWO号*/
                 field:'TRQ_ID',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.TRQ_ID)</span>',
                 width:130,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.TRQ_ID)',required:true, validType: 'length[8,20]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*FO号*/
                 field:'TOR_ID',
                 title:'@Html.DisplayNameFor(model => model.TOR_ID)',
                 width:130,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.TOR_ID)',required:false, validType: 'length[8,20]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*文件名*/
                 field:'FileName',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.FileName)</span>',
                 width:130,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.FileName)',required:true, validType: 'length[0,30]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*备注*/
                 field:'Comment',
                 title:'@Html.DisplayNameFor(model => model.Comment)',
                 width:260,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Comment)',required:false, validType: 'length[0,50]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*文件类型*/
                 field:'FileType',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.FileType)</span>',
                 width:130,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.FileType)',required:true, validType: 'length[0,3]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*文件路径*/
                 field:'FilePath',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.FilePath)</span>',
                 width:260,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.FilePath)',required:true, validType: 'length[0,100]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{   /*上传日期*/
                field:'UploadDateTime',
                title:'<span class="required">@Html.DisplayNameFor(model => model.UploadDateTime)</span>',
                width:160,
                align:'right',
                hidden:false,
                editor:{
                      type:'datetimebox',
                      options:{prompt:'@Html.DisplayNameFor(model => model.UploadDateTime)',required:true}
                      },
                formatter:datetimeformatter,
                sortable:true,
                resizable:true
			},
			{    /*上传用户*/
                 field:'User',
                 title:'@Html.DisplayNameFor(model => model.User)',
                 width:130,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.User)',required:false, validType: 'length[0,20]' }
                       },
                 sortable:true,
                 resizable:true
			},
			{    /*经度*/
                 field:'Long',
                 title:'@Html.DisplayNameFor(model => model.Long)',
                 width:100,
                 align:'right',
                 hidden:false,
                 editor:{
                        type:'numberbox',
                        options:{ prompt:'@Html.DisplayNameFor(model => model.Long)',
                                  required:false,
                                  precision:2,
                                  validType:'decimal',

                                }
                        },
                formatter:numberformatter,
                sortable:true,
                resizable:true
			},
			{    /*维度*/
                 field:'Lat',
                 title:'@Html.DisplayNameFor(model => model.Lat)',
                 width:100,
                 align:'right',
                 hidden:false,
                 editor:{
                        type:'numberbox',
                        options:{ prompt:'@Html.DisplayNameFor(model => model.Lat)',
                                  required:false,
                                  precision:2,
                                  validType:'decimal',

                                }
                        },
                formatter:numberformatter,
                sortable:true,
                resizable:true
			},
			{    /*地图位置*/
                 field:'Location',
                 title:'@Html.DisplayNameFor(model => model.Location)',
                 width:260,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Location)',required:false, validType: 'length[0,100]' }
                       },
                 sortable:true,
                 resizable:true
			},
                 ]]
           });

           $dg.datagrid('enableFilter',[
				{   /*Id*/
					  field: 'Id',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{   /*经度*/
					  field: 'Long',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{   /*维度*/
					  field: 'Lat',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{     /*上传日期*/
					  field: 'UploadDateTime',
					  type: 'dateRange',
					  options: {
						  onChange: value => {
							    $dg.datagrid('addFilterRule', {
									  field: 'UploadDateTime',
									  op: 'between',
									  value: value
								  });

							    $dg.datagrid('doFilter');
						  }
					  }
				  },
		   ]);
	 });

  </script>
  <!--begin popup detailview javascript block -->
  <script type="text/javascript">
    //判断新增编辑状态
    var MODELSTATE = 'Added';
    var attachmentid = null;
    var hasChanged = false;
    function loadData(id, data, state) {
      MODELSTATE = state;
      attachmentid = id;
      $("#detailswindow").window("open");
      $('#attachment_form').form('reset');
      $('#attachment_form').form('load', data);
    }
    var $editform = $('#attachment_form');
    //async 保存数据
    async function saveitem() {
      if ($editform.form('enableValidation').form('validate')) {
        let attachment = $editform.serializefiles();
        let url = '/Attachments/EditAsync';
        //判断是新增或是修改方法
        if (MODELSTATE === 'Added') {
          url = '/Attachments/CreateAsync';
        }
        var token = $('input[name="__RequestVerificationToken"]', $editform).val();
        $.messager.progress({ title: '上传导入中请等待！' });
        $.ajax({
          url: url,
          type: 'POST',
          data: attachment,
          cache: false,
          dataType: 'json',
          processData: false, // Don't process the files
          contentType: false,
          success: function (response, textStatus, jqXHR) {
            $.messager.progress('close');
            console.log(response);
            if (response.success) {
              toastr.success("上传附件完成");
              $('#detailswindow').window('close');
              $dg.datagrid('reload');
            } else {
              $.messager.alert("错误", "上传失败！" + response.err, "error");
            }

          },
          error: function (jqXHR, textStatus, errorThrown) {
            $.messager.progress('close');
            $.messager.alert("错误", "上传失败！" + errorThrown);
          }
        });

        //$.ajax({
        //        type: "POST",
        //        url: url,
        //        data: {
        //            __RequestVerificationToken: token,
        //            attachment:attachment
        //        },
        //        dataType: 'json',
        //        contentType: 'application/x-www-form-urlencoded; charset=utf-8'
        //    })
        //    .done(response => {
        //        if (response.success) {
        //            hasChanged = false;
        //            $editform.form('disableValidation');
        //            $dg.datagrid('reload');
        //            $('#detailswindow').window("close");
        //            toastr.success("保存成功");
        //        } else {
        //            $.messager.alert("错误",   response.err, "error");
        //        }
        //        })
        //    .fail((jqXHR, textStatus, errorThrown) => {
        //           $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
        //        });
      }
    }
    //关闭窗口
    function closewindow() {
      $('#detailswindow').window('close');
    }
    //todo
    function todo() {
      console.log('todo.....');
    }
    //判断是否有没有保存的记录
    function hasmodified() {
      return hasChanged;

    }



  </script>


  <!--end popup detailview javascript block -->
  <script src="~/Scripts/jquery.filerupload.min.js"></script>
}


