@model WebApp.Models.Vehicle
@{
	ViewBag.Title = "车辆信息";
}
<!-- MAIN CONTENT -->
<div id="content">
    <!-- quick navigation bar -->
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-table fa-fw "></i>
                业务主数据
                <span>
                    >
                  车辆信息
                </span>
            </h1>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">
            
        </div>
    </div>
    <!-- end quick navigation bar -->


     <!-- widget grid -->
     <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2>车辆信息</h2>
                    </header>

                     <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <div id="fakeLoader"></div>
                            <div class="widget-body-toolbar">
                                <div class="row">
                                    <div class="col-sm-8  ">
                                        <!-- 开启授权控制 -->
                                        

                                        <div class="btn-group">
                                            <a href="javascript:append()" class="btn btn-sm btn-default"> <i class="fa fa-plus"></i> 新增 </a>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:removeit()" class="btn btn-sm btn-default"> <i class="fa fa-trash-o"></i> 删除 </a>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:accept()" class="btn btn-sm btn-default"> <i class="fa fa-floppy-o"></i> 保存 </a>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:reload()" class="btn btn-sm btn-default"> <i class="fa fa-refresh"></i> 刷新 </a>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:reject()" class="btn btn-sm btn-default"> <i class="fa fa-ban"></i> 取消 </a>
                                        </div>
                                        <div class="btn-group">
                                            <button type="button" onclick="importexcel()" class="btn btn-default"><i class="fa fa-cloud-upload"></i> 导入数据 </button>
                                            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <span class="caret"></span>
                                                <span class="sr-only">Toggle Dropdown</span>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a href="javascript:importexcel()"><i class="fa fa-file-excel-o"></i>  上传Excel </a></li>
                                                <li role="separator" class="divider"></li>
                                                <li><a href="javascript:downloadtemplate()"><i class="fa fa-download"></i> 下载模板 </a></li>
                                            </ul>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:exportexcel()" class="btn btn-sm btn-default"> <i class="fa fa-file-excel-o"></i> 导出Excel </a>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:print()" class="btn btn-sm btn-default"> <i class="fa fa-print"></i> 打印 </a>
                                        </div>
                                        <div class="btn-group">
                                            <a href="javascript:dohelp()" class="btn btn-sm btn-default"> <i class="fa fa-question-circle-o"></i> 帮助 </a>
                                        </div>
                                    </div>
                                    <div class="col-sm-4 text-align-right">
                                        <div class="btn-group">
                                            <a href="javascript:window.history.back()" class="btn btn-sm btn-success"> <i class="fa fa-chevron-left"></i> 返回 </a>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="alert alert-warning no-margin fade in">
                                <button class="close" data-dismiss="alert">
                                    ×
                                </button>
                                <i class="fa-fw fa fa-info"></i>
                                注意事项:
                            </div>
	 <!--begin datagrid-content -->
	 <div class="table-responsive">
		<table id="vehicles_datagrid">  
		</table>
				 
		
		
		</div>
		<!--end datagrid-content -->
                        
                         </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- WIDGET END -->

        </div>

        <!-- end row -->
    </section>
    <!-- end widget grid -->

	<!-- file upload partial view -->
	@Html.Partial("_ImportWindow",new ViewDataDictionary {{ "EntityName","Vehicle" }})		 
	<!-- end file upload partial view -->
    <!-- detail popup window -->
    @Html.Partial("_PopupDetailFormView",new WebApp.Models.Vehicle())
    <!-- end detail popup window -->
            
</div>
<!-- END MAIN CONTENT -->

@section Scripts {
<script type="text/javascript">
 
      //是否启用弹窗口模式
      const POPUPMODE = false;
      //上传导入参数设定
      const entityname = "Vehicle";
      var vehicle = {};
      
      //下载Excel导入模板
      function downloadtemplate() {
             //默认模板路径存放位置
          var url = "/FileUpload/DownLoad?file=/ExcelTemplate/Vehicle.xlsx";
          $.fileDownload(url)
           .done(() => {
                    console.log('file download success!');
                })
           .fail(() => {
               $.messager.alert("错误","没有找到模板文件! {" + url + "}","error"); 
            });           
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
        //打开Excel上传导入
	   function importexcel() {
		    $("#importwindow").window("open");
	   }
	   //执行导出下载Excel
	   function exportexcel() {
				var filterRules = JSON.stringify($dg.datagrid("options").filterRules);
				//console.log(filterRules);
				$.messager.progress({ title: "正在执行导出!" });
				var formData = new FormData();
				formData.append("filterRules", filterRules);
				formData.append("sort", "Id");
				formData.append("order", "asc");
				$.postDownload("/Vehicles/ExportExcel", formData).then(res => {
                    $.messager.progress("close");
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress("close");
                    $.messager.alert("错误", err.statusText, "error");
                });

		}
        //显示帮助信息
        function dohelp() {
            $.bigBox({
                title: "帮助信息",
                content: "如有问题请联系系统管理员",
                color: "#3276B1",
                timeout: 5000,
                icon: "fa fa-question swing animated"
               
            });
        }
        var editIndex = undefined;
        //选中记录
       function onSelect(index, row) {
          vehicle = row;
       }
       //重新加载数据
	   function reload() {
			if (endEditing()) {
						$dg.datagrid("reload");
                        //$dg.datagrid("uncheckAll");
                        //$dg.datagrid("unselectAll");
		    }
		}
    //关闭编辑状态
	function endEditing() {
			if (editIndex === undefined) { 
                return true; 
            }
			if ($dg.datagrid("validateRow", editIndex)) {
				$dg.datagrid("endEdit", editIndex);
				editIndex = undefined;
                return true;
			} else {
				return false;
			}
		}
    //单击列开启编辑功能
	function onClickCell(index, field) {
        vehicle = $dg.datagrid('getRows')[index];
	    var _operates = ["_operate1", "_operate2", "_operate3", "ck"];
		if ($.inArray(field, _operates) >= 0) {
				return;
		}
		if (editIndex !== index) {
				if (endEditing()) {
					$dg.datagrid("selectRow", index)
							.datagrid("beginEdit", index);
                    editIndex = index;
					var ed = $dg.datagrid("getEditor", { index: index, field: field });
					if (ed) {
						($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
					}
				} else {
					$dg.datagrid("selectRow", editIndex);
				}
			}
		}
    //新增记录
  function append() {
    const item = {
      PartnerCode: '0000001900',
      PartnerName: '昆山飞力集装箱运输有限公司',
      PlateNumberPosition: '1',
      VehStatus: '0',
      Status: 0,
      CarType: '4011',
      VehicleType: '大型汽车号牌',
      VehicleProperty: '2001',
      ECOMark: '绿标',
    }
        if (POPUPMODE) {
            //弹出新增窗口
            showPopupCreateWindow(item);
        } else {
            if (endEditing()) {
                //对必填字段进行默认值初始化
                $dg.datagrid("insertRow",
                    {
                        index: 0,
                        row: item
                    });
                editIndex = 0;
                $dg.datagrid("selectRow", editIndex)
                    .datagrid("beginEdit", editIndex);
            }
        }
    }
    //删除编辑的行
	function removeit() {
        if($dg.datagrid("getChecked").length > 0 ){
            deletechecked();
        } else {
		  if (editIndex !== undefined) { 
    			$dg.datagrid("cancelEdit", editIndex)
					.datagrid("deleteRow", editIndex);
			   editIndex = undefined;
          }
        }
	}
    //删除选中的行
    function deletechecked() {
            var rows = $dg.datagrid("getChecked");
            if (rows.length > 0) {
                var id = rows.map(item => {
                    return item.Id;
                });
                $.messager.confirm("确认", "你确定要删除这些记录?", result => {
                    if (result) {
                        $.post("/Vehicles/DeleteCheckedAsync", { id: id })
                         .done(response => {
                                if (response.success) {
                                    reload();
                                } else {
                                    $.messager.alert("错误", response.err,"error");
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						         //console.log(errorThrown);
						         $.messager.alert("错误", "提交错误了!" + errorThrown,"error");
					      });
                    }
                });  
            } else {
                $.messager.alert("提示", "请先选择要删除的记录!","question");
            }
     }
    //提交保存后台数据库
	function accept() {
			if (endEditing()) {
				if ($dg.datagrid("getChanges").length) {
					var inserted = $dg.datagrid("getChanges", "inserted");
					var deleted = $dg.datagrid("getChanges", "deleted");
					var updated = $dg.datagrid("getChanges", "updated");
					var item = new Object();
					if (inserted.length) {
						item.inserted = inserted;
					}
					if (deleted.length) {
						item.deleted = deleted;
					}
					if (updated.length) {
						item.updated = updated;
					}
					//console.log(JSON.stringify(item));
					$.post("/Vehicles/SaveDataAsync", item)
                     .done(response => {
						   //console.log(response);
						   if (response.success) {
							   $.messager.alert("提示", "保存成功!","info");
							   $dg.datagrid("acceptChanges");
							   $dg.datagrid("reload");
						   } else {
                               $.messager.alert("错误", response.err ,"error");
                           }
					    })
                      .fail((jqXHR, textStatus, errorThrown) => {
						//console.log(errorThrown);
						$.messager.alert("异常",  errorThrown,"error");
					  });
				}
			}
	}
	function reject() {
			$dg.datagrid("rejectChanges");
			editIndex = undefined;
	}
	function getChanges() {
			var rows = $dg.datagrid("getChanges");
			//console.log(rows.length + " rows are changed!");
	}
    //弹出明细信息
	function showDetailsWindow(id) {
			//console.log(index, row);
            $.get("/Vehicles/PopupEditAsync/" + id)
             .done(data => {
                //console.log(data);
                loadData(id,data);
              })
             .fail((jqXHR, textStatus, errorThrown) => {
						$.messager.alert("错误", "获取数据异常!" + errorThrown,"error");
		      });
	}
    //弹出新建窗口
    function showPopupCreateWindow(item) {
         loadData(-1,item,'Added');
           
    }
    //初始化定义datagrid
    var $dg = $("#vehicles_datagrid");
    $(() => {
		 //定义datagrid结构
        $dg.datagrid({
            rownumbers: true,
            checkOnSelect: true,
            selectOnCheck: true,
            idField: 'Id',
            sortName: 'Id',
            sortOrder: 'desc',
            remoteFilter: true,
            singleSelect: true,
            onSelect: onSelect,
            url: '/Vehicles/GetDataAsync',
            method: 'get',
            onClickCell: onClickCell,
            pagination: true,
            striped: true,
            columns: [[
                /*开启CheckBox选择功能*/
                /*{ field: 'ck', checkbox: true },*/
                {
                    field: '_operate1',
                    title: '操作',
                    width: 60,
                    sortable: false,
                    resizable: true,
                    formatter: function showdetailsformatter(value, row, index) {
                        return '<a onclick="showDetailsWindow(' + row.Id + ')" class="btn btn-default btn-xs" title="查看明细" href="javascript:void(0)"><i class="fa fa-pencil-square-o"></i> </a>';
                    }
                },
                /*{field:'Id',width:80 ,sortable:true,resizable:true }*/
                {
                    field: 'PlateNumber',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.PlateNumber)</span>',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: {
                            prompt: '@Html.DisplayNameFor(model => model.PlateNumber)',
                            required: true,
                            validType: 'carNo'
                        }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'PartnerCode',
                    title: '@Html.DisplayNameFor(model => model.PartnerCode)',
                    width: 140,
                    editor: {
                      type: 'pbeditor',
                      options: {
                        prompt: '@Html.DisplayNameFor(model => model.PartnerCode)',
                        required: false,
                        validType: 'length[0,10]',
                        onClickRow: function (index, row) {
                          var ed = $dg.datagrid("getEditor", { index: editIndex, field: 'PartnerName' });
                          $(ed.target).textbox('setValue', row.Name);
                        }
                      }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'PartnerName',
                    title: '@Html.DisplayNameFor(model => model.PartnerName)',
                    width: 260,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.PartnerName)', required: false, validType: 'length[0,50]' }
                    },
                    sortable: true,
                    resizable: true
                },
               
                {
                    field: 'Driver',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.Driver)</span>',
                    width: 140,
                    editor: {
                        type: 'drivereditor',
                      options: {
                        prompt: '@Html.DisplayNameFor(model => model.Driver)',
                        required: true,
                        validType: 'length[0,20]',
                        onClickRow: function (index, row) {
                          var ed = $dg.datagrid("getEditor", { index: editIndex, field: 'DriverPhone' });
                          $(ed.target).textbox('setValue', row.MobileTelephoneNumber);
                        }
                      }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'DriverPhone',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.DriverPhone)</span>',
                    width: 260,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.DriverPhone)', required: true, validType: 'mobile' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'PlateNumberPosition',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.PlateNumberPosition)</span>',
                    width: 140,
                    editor: {
                        type: 'platenumberpositioneditor',
                        options: { prompt: '@Html.DisplayNameFor(model => model.PlateNumberPosition)', required: true, validType: 'length[0,10]' }
                    },
                    formatter: platenumberpositionformatter,
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'Status',
                    title: '@Html.DisplayNameFor(model => model.Status)',
                    width: 100,
                    align: 'right',
                    editor: {
                        /*需要在键值对中维护status枚举值并生成JavaScript才能使用*/
                        type: 'vstatuseditor',
                        options: {
                            prompt: '@Html.DisplayNameFor(model => model.Status)',
                            required: false
                        }
                    },
                    formatter: vstatusformatter
                },
                {
                    field: 'VehStatus',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.VehStatus)</span>',
                    width: 140,
                    editor: {
                        type: 'vehstatuseditor',
                        options: { prompt: '@Html.DisplayNameFor(model => model.VehStatus)', required: true, validType: 'length[0,20]' }
                    },
                    formatter: vehstatusformatter,
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'CarType',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.CarType)</span>',
                    width: 140,
editor: {
                        type: 'vehicletypeeditor',
                        options: { prompt: '@Html.DisplayNameFor(model => model.VehicleType)', required: false, validType: 'length[0,20]' }
                    },
                    formatter: vehicletypeformatter,
                    
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'VehicleType',
                    title: '@Html.DisplayNameFor(model => model.VehicleType)',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.CarType)', required: true, validType: 'length[0,20]' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'VehicleProperty',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.VehicleProperty)</span>',
                    width: 140,
                    editor: {
                        type: 'vehiclepropertyeditor',
                        options: { prompt: '@Html.DisplayNameFor(model => model.VehicleProperty)', required: true, validType: 'length[0,20]' }
                    },
                    formatter: vehiclepropertyformatter,
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'ECOMark',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.ECOMark)</span>',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.ECOMark)', required: true }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'RoadKM',
                    title: '@Html.DisplayNameFor(model => model.RoadKM)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.RoadKM)', required: false }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'StdLoadWeight',
                    title: '@Html.DisplayNameFor(model => model.StdLoadWeight)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.StdLoadWeight)', required: false }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'LoadWeight',
                    title: '@Html.DisplayNameFor(model => model.LoadWeight)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.LoadWeight)', required: false }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'LoadVolume',
                    title: '@Html.DisplayNameFor(model => model.LoadVolume)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.LoadVolume)', required: false, precision: 2 }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'CarriageSize',
                    title: '@Html.DisplayNameFor(model => model.CarriageSize)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.CarriageSize)', required: false, precision: 2 }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'VehLongSize',
                    title: '@Html.DisplayNameFor(model => model.VehLongSize)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.VehLongSize)', required: false, precision: 2 }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'VehHightSize',
                    title: '@Html.DisplayNameFor(model => model.VehHightSize)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.VehHightSize)', required: false, precision: 2 }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'Axles',
                    title: '@Html.DisplayNameFor(model => model.Axles)',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Axles)', required: false }
                    },
                    formatter: value => {
                        return numeral(value).format('0,0.00');
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'AssistantDriver',
                    title: '@Html.DisplayNameFor(model => model.AssistantDriver)',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.AssistantDriver)', required: false, validType: 'length[0,20]' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'AssistantDriverPhone',
                    title: '@Html.DisplayNameFor(model => model.AssistantDriverPhone)',
                    width: 260,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.AssistantDriverPhone)', required: false, validType: 'length[0,50]' }
                    },
                    sortable: true,
                    resizable: true
                }
                 

                
            ]]
        });

           $dg.datagrid("enableFilter",[
                /*需要在键值队维护好status枚举值*/
				{
					  field: "Status",
					  type: "vstatusfilter",
					  options: {
					
						       }
               },
               {
                   field: "VehicleProperty",
                   type: "vehiclepropertyfilter",
                   options: {

                   }
               },
               {
                   field: "CarType",
                   type: "vehicletypefilter",
                   options: {

                   }
               },
               {
                   field: "PlateNumberPosition",
                   type: "platenumberpositionfilter",
                   options: {

                   }
               },

               {
                   field: "VehStatus",
                   type: "vehstatusfilter",
                   options: {

                   }
               },
				{
					  field: "Id",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "StdLoadWeight",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "LoadWeight",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "LoadVolume",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "CarriageSize",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehLongSize",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehHightSize",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "Axles",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "AVGECON",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "AVGECONScale",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "RoadKM",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "RoadHours",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "RoadKMScale",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "RPM",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "PurchasedAmount",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehLong",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehWide",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehHigh",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "ServiceLife",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "MaintainKM",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "MaintainMonth",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehTailBoardLife",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "VehTailBoardAmount",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseRatedUsers",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseVehWeight",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseDevWeight",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseNetWeight",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseNetVolume",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseVehWide",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseVehHigh",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "DrLicenseVehLong",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "InsTrafficPolicyAmount",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "InsThirdPartyAmount",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "InsThirdPartyLogisticsAmount",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "UsingDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "UsingDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "PurchasedDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "PurchasedDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "MaintainDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "MaintainDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "DrLicenseRegistrationDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "DrLicenseRegistrationDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "DrLicensePubDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "DrLicensePubDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "DrLicenseScrapedDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "DrLicenseScrapedDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "LoLicensePubDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "LoLicensePubDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "LoLicenseValidDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "LoLicenseValidDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "LoLicenseCheckDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "LoLicenseCheckDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "InsThirdPartyVaildateDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "InsThirdPartyVaildateDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "InsThirdPartyLogisticsVaildateDate",
					  type: "dateRange",
					  options: {
						  onChange: value => {
							    $dg.datagrid("addFilterRule", {
									  field: "InsThirdPartyLogisticsVaildateDate",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
				{
					  field: "ExistVehTailBoard",
					  type: "booleanfilter"
     			 },
		   ]);
    });






   
</script>
<script src="~/Scripts/jquery.filerupload.min.js"></script>
}

 
