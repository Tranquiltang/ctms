@model WebApp.Models.MaintainDetail

<script type="text/javascript">

    //datebox editor
    $.extend($.fn.datagrid.defaults.editors, {
        richtexteditor: {
            init: function (container, options) {
                var input = $('<input multiline="true">').appendTo(container);
                var myoptions = {
                    multiline: true,
                    
                };
               
                $.extend(options, myoptions);
                input.textbox(options);
        
                return input;
            },
            destroy: function (target) {
                $(target).textbox('destroy');
            },
            getValue: function (target) {

                return $(target).textbox('getValue');
            },
            setValue: function (target, value) {

                $(target).textbox('setValue', value);

            },
            resize: function (target, width) {
                $(target).textbox('resize', width);
            }
        }
    });

//初始化 MaintainDetail datagrid
var $maintaindetailsdg = $('#maintaindetails_datagrid');
$(() => {
    $maintaindetailsdg.datagrid({
            rownumbers: true,
            iconCls: 'fa fa-list',
            idField: 'Id',
            sortName: 'Id',
            sortOrder: 'asc',
            remoteFilter: true,
            singleSelect: true,
            method: 'get',
            onClickCell: maintaindetails_onClickCell,
            pagination: true,
            striped: true,
            columns: [[
		     /*{field:'Id',width:80 ,sortable:true,resizable:true }*/
			{
                 field:'Name',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Name)</span>',
                 width:230,
                 editor:{
                     type:'maintaineditor',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.Name)',
                         required: true,
                         validType: 'length[0,50]',
                         onClickRow: (i, item) => {
                             //console.log(item);
                             var ed1 = $maintaindetailsdg.datagrid("getEditor", { index: maintaindetails_editIndex, field: "WHour" });
                             $(ed1.target).numberbox("setValue", item.Hours);
                         }
                     }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'Trouble',
                 title:'@Html.DisplayNameFor(model => model.Trouble)',
                 width:200,
                 editor:{
                     type:'textbox',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.Trouble)',
                         multiline:true,
                         required: false,
                         validType: 'length[0,500]'
                     }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'WHour',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.WHour)</span>',
                 width:100,
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'@Html.DisplayNameFor(model => model.WHour)', required:true   ,precision:2 }
                        },
                sortable:true,
                resizable:true,
                formatter:numberformatter
			},
			{
                 field:'PlateNumber',
                 title:'@Html.DisplayNameFor(model => model.PlateNumber)',
                 width:140,
                 editor:{
                     type:'vehicleditor',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.PlateNumber)',
                         required: false,
                         validType: 'length[0,10]'
                     }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'PlateNumber1',
                 title:'@Html.DisplayNameFor(model => model.PlateNumber1)',
                 width:140,
                 editor:{
                     type:'vehicleditor',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.PlateNumber1)',
                         required: false,
                         validType: 'length[0,10]'
                     }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'PartNo',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.PartNo)</span>',
                 width:140,
                 editor:{
                     type:'parteditor',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.PartNo)',
                         required: true,
                         validType: 'length[0,30]',
                         onClickRow: (i, item) => {
                             //console.log(item);
                             var ed1 = $maintaindetailsdg.datagrid("getEditor", { index: maintaindetails_editIndex, field: "Spec" });
                             $(ed1.target).textbox("setValue", item.Spec);
                             var ed2 = $maintaindetailsdg.datagrid("getEditor", { index: maintaindetails_editIndex, field: "PartName" });
                             $(ed2.target).textbox("setValue", item.PartName);
                             var ed3 = $maintaindetailsdg.datagrid("getEditor", { index: maintaindetails_editIndex, field: "Model" });
                             $(ed3.target).textbox("setValue", item.Model);
                             var ed4 = $maintaindetailsdg.datagrid("getEditor", { index: maintaindetails_editIndex, field: "Unit" });
                             $(ed4.target).textbox("setValue", item.Unit);
                             var ed5 = $maintaindetailsdg.datagrid("getEditor", { index: maintaindetails_editIndex, field: "Price" });
                             $(ed5.target).numberbox("setValue", item.Price);
                         }
                     }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'PartName',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.PartName)</span>',
                 width:260,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.PartName)',required:true ,validType:'length[0,50]'  }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'Spec',
                 title:'@Html.DisplayNameFor(model => model.Spec)',
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Spec)',required:false ,validType:'length[0,30]'  }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'Model',
                 title:'@Html.DisplayNameFor(model => model.Model)',
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Model)',required:false ,validType:'length[0,30]'  }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'Unit',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Unit)</span>',
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Unit)',required:true ,validType:'length[0,5]'  }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'Price',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Price)</span>',
                 width:100,
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'@Html.DisplayNameFor(model => model.Price)', required:true   ,precision:2 }
                        },
                sortable:true,
                resizable:true,
                formatter:numberformatter
			},
			{
                 field:'Qty',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Qty)</span>',
                 width:100,
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'@Html.DisplayNameFor(model => model.Qty)', required:true   ,precision:2 }
                        },
                sortable:true,
                resizable:true,
                formatter:numberformatter
			},
			{
                 field:'Amount',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Amount)</span>',
                 width:100,
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'@Html.DisplayNameFor(model => model.Amount)', required:true   ,precision:2 }
                        },
                sortable:true,
                resizable:true,
                formatter:numberformatter
			},
			{
                 field:'Solved',
                 title:'@Html.DisplayNameFor(model => model.Solved)',
                 width:300,
                 editor:{
                          type:'textbox',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.Solved)',
                         required: false,
                         validType: 'length[0,500]'
                     }
                       },
                 sortable:true,
                 resizable:true
			},
			{
                 field:'Worker',
                 title:'@Html.DisplayNameFor(model => model.Worker)',
                 width:140,
                 editor:{
                          type:'textbox',
                     options: {
                         prompt: '@Html.DisplayNameFor(model => model.Worker)',
                         required: false,
                         validType: 'length[0,10]'
                     }
                       },
                 sortable:true,
                 resizable:true
			}
            ]]
            });
            //初始化 datagrid filter
            $maintaindetailsdg.datagrid("enableFilter",[
				{
					  field: "Id",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "WHour",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "Price",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "Qty",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{
					  field: "Amount",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
		   {
				 field: "MaintainHeadId",
				 type:"combobox",
				 options:{
								valueField:"Id",
								textField:"OrderNo",
								method:"get",
								url:"/MaintainHeads/GetMaintainHeadsAsync",
								onChange: function (value) {
								if (value == "") {
									$maintaindetailsdg.datagrid("removeFilterRule", "MaintainHeadId");
								} else {
									$maintaindetailsdg.datagrid("addFilterRule", {
										field: "MaintainHeadId",
										op: "equal",
										value: value
								});
							}
							$maintaindetailsdg.datagrid("doFilter");
						}
					}
		   },
		   ]);

});
    //datagrid CRUD method
    var maintaindetails_editIndex = undefined;
    //取消
    function maintaindetails_reject() {
		$maintaindetailsdg.datagrid("rejectChanges");
		maintaindetails_editIndex = undefined;
    }
    //重新加载数据
    function maintaindetails_reload() {
			if (endEditing()) {
				$maintaindetailsdg.datagrid("reload");
			}
	}
    //关闭编辑状态
    function maintaindetails_endEditing() {
        if (maintaindetails_editIndex === undefined) {
            return true;
        }
        if ($maintaindetailsdg.datagrid("validateRow", maintaindetails_editIndex)) {
            $maintaindetailsdg.datagrid("endEdit", maintaindetails_editIndex);
            maintaindetails_editIndex = undefined;
            return true;
        } else {
            return false;
        }
    }
    //单击列开启编辑功能
	function maintaindetails_onClickCell(index, field) {
			var _operates = ["_operate1", "_operate2", "_operate3", "ck"];
			if ($.inArray(field, _operates) >= 0) {
				return false;
			}
			if (maintaindetails_editIndex !== index) {
				if (maintaindetails_endEditing()) {
					$maintaindetailsdg.datagrid("selectRow", index)
							.datagrid("beginEdit", index);
                    maintaindetails_editIndex = index;
					var ed = $maintaindetailsdg.datagrid("getEditor", { index: index, field: field });
					if (ed) {
						($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
					}
				} else {
					$maintaindetailsdg.datagrid("selectRow", maintaindetails_editIndex);
				}
			}
		}
        //新增记录
    function maintaindetails_append() {
			if (maintaindetails_endEditing()) {
				//对必填字段进行默认值初始化
				$maintaindetailsdg.datagrid("insertRow",
                               { index: 0,
                                  row: {
                                      Trouble: '-',
                                      WHour: 1,
                                      PlateNumber:'',
                                      PlateNumber1: '-',
                                      Spec: '-',
                                      Model: '-',
                                      Unit: 'EA',
                                      Price: 0,
                                      Qty: null,
                                      Amount: null,
                                      Solved: '-',
                                      Worker: '-',
                                      OrderNo: orderno,
                                  MaintainHeadId:maintainheadid
                                  }
                                });
				maintaindetails_editIndex = 0;
				$maintaindetailsdg.datagrid("selectRow", maintaindetails_editIndex)
						.datagrid("beginEdit", maintaindetails_editIndex);
			}
		}
    //删除编辑的行
	function maintaindetails_removeit() {
		if (maintaindetails_editIndex !== undefined) {
			$maintaindetailsdg.datagrid("cancelEdit", maintaindetails_editIndex)
					           .datagrid("deleteRow", maintaindetails_editIndex);
			maintaindetails_editIndex = undefined;
        }
	}
    //删除选中的行
    function maintaindetails_deletechecked() {
            var rows = $maintaindetailsdg.datagrid("getChecked");
            if (rows.length > 0) {
                var id = rows.map(item => {
                    return item.Id;
                });
                $.messager.confirm("确认", "你确定要删除这些记录?",result => {
                    if (result) {
                        $.post("/MaintainDetails/DeleteCheckedAsync", { id: id })
                         .done(response => {
                            if (response.success) {
                                $maintaindetailsdg.datagrid("reload");
                            } else {
                                $.messager.alert("错误", response.err,"error");
                            }
                         });
                    }
                });
            } else {
                $.messager.alert("提示", "请先选择要删除的记录!");
            }
      }
    //提交保存后台数据库
	function maintaindetails_accept() {
			if (maintaindetails_endEditing()) {
				if ($maintaindetailsdg.datagrid("getChanges").length) {
					var inserted = $maintaindetailsdg.datagrid("getChanges", "inserted");
					var deleted = $maintaindetailsdg.datagrid("getChanges", "deleted");
					var updated = $maintaindetailsdg.datagrid("getChanges", "updated");
					var item = new Object();
					if (inserted.length) {
						item.inserted = inserted;
					}
					if (deleted.length) {
						item.deleted = deleted;
					}
					if (updated.length) {
						item.updated = updated;
					}
					//console.log(JSON.stringify(item));
					$.post("/MaintainDetails/SaveDataAsync", item)
                     .done(response => {
						//console.log(response);
						if (response.success) {
							$.messager.alert("提示", "提交成功!");
							$maintaindetailsdg.datagrid("acceptChanges");
							$maintaindetailsdg.datagrid("reload");
						} else {
                           $.messager.alert("错误", response.err ,"error");
                        }
					  })
                      .fail((jqXHR, textStatus, errorThrown) => {
						//console.log(errorThrown);
						$.messager.alert("错误", "提交错误了!" + errorThrown,"error");

					  });
				}
			}
		}
</script>


