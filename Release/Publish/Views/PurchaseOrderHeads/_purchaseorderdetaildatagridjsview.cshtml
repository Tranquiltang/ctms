@model WebApp.Models.PurchaseOrderDetail

<script type="text/javascript">
//初始化 PurchaseOrderDetail datagrid
var $purchaseorderdetailsdg = $('#purchaseorderdetails_datagrid');
    $(() => {
        $purchaseorderdetailsdg.datagrid({
            rownumbers: true,
            iconCls: 'fa fa-list',
            idField: 'Id',
            sortName: 'Id',
            sortOrder: 'asc',
            remoteFilter: true,
            singleSelect: true,
            method: 'get',
            onClickCell: purchaseorderdetails_onClickCell,
            pagination: true,
            striped: true,
            columns: [[
                /*{field:'Id',width:80 ,sortable:true,resizable:true }*/
                {
                    field: 'PartNo',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.PartNo)</span>',
                    width: 140,
                    editor: {
                        type: 'parteditor',
                        options: {
                            prompt: '@Html.DisplayNameFor(model => model.PartNo)',
                            required: true,
                            validType: 'length[0,30]',
                            onClickRow: (i, item) => {
                                //console.log(item);
                                var ed1 = $purchaseorderdetailsdg.datagrid("getEditor", { index: purchaseorderdetails_editIndex, field: "Spec" });
                                $(ed1.target).textbox("setValue", item.Spec);
                                var ed2 = $purchaseorderdetailsdg.datagrid("getEditor", { index: purchaseorderdetails_editIndex, field: "PartName" });
                                $(ed2.target).textbox("setValue", item.PartName);
                                var ed3 = $purchaseorderdetailsdg.datagrid("getEditor", { index: purchaseorderdetails_editIndex, field: "Model" });
                                $(ed3.target).textbox("setValue", item.Model);
                                var ed4 = $purchaseorderdetailsdg.datagrid("getEditor", { index: purchaseorderdetails_editIndex, field: "Unit" });
                                $(ed4.target).textbox("setValue", item.Unit);
                                var ed5 = $purchaseorderdetailsdg.datagrid("getEditor", { index: purchaseorderdetails_editIndex, field: "Price" });
                                $(ed5.target).numberbox("setValue", item.Price);
                            }
                        }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'PartName',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.PartName)</span>',
                    width: 260,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.PartName)', required: true, validType: 'length[0,50]' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'Spec',
                    title: '@Html.DisplayNameFor(model => model.Spec)',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Spec)', required: false, validType: 'length[0,30]' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'Model',
                    title: '@Html.DisplayNameFor(model => model.Model)',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Model)', required: false, validType: 'length[0,30]' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'Unit',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.Unit)</span>',
                    width: 140,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Unit)', required: true, validType: 'length[0,5]' }
                    },
                    sortable: true,
                    resizable: true
                },
                {
                    field: 'Price',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.Price)</span>',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Price)', required: true, precision: 2 }
                    },
                    sortable: true,
                    resizable: true,
                    formatter: numberformatter
                },
                {
                    field: 'Qty',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.Qty)</span>',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Qty)', required: true, precision: 2 }
                    },
                    sortable: true,
                    resizable: true,
                    formatter: numberformatter
                },
                {
                    field: 'Amount',
                    title: '<span class="required">@Html.DisplayNameFor(model => model.Amount)</span>',
                    width: 100,
                    align: 'right',
                    editor: {
                        type: 'numberbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Amount)', required: true, precision: 2 }
                    },
                    sortable: true,
                    resizable: true,
                    formatter: numberformatter
                },
                {
                    field: 'Remark',
                    title: '@Html.DisplayNameFor(model => model.Remark)',
                    width: 260,
                    editor: {
                        type: 'textbox',
                        options: { prompt: '@Html.DisplayNameFor(model => model.Remark)', required: false, validType: 'length[0,100]' }
                    },
                    sortable: true,
                    resizable: true
                } 
            ]]
        });
        //初始化 datagrid filter
        $purchaseorderdetailsdg.datagrid("enableFilter", [
            {
                field: "Id",
                type: "numberbox",
                op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
            },
            {
                field: "Price",
                type: "numberbox",
                op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
            },
            {
                field: "Qty",
                type: "numberbox",
                op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
            },
            {
                field: "Amount",
                type: "numberbox",
                op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
            },
            {
                field: "PurchaseOrderHeadId",
                type: "combobox",
                options: {
                    valueField: "Id",
                    textField: "OrderNo",
                    method: "get",
                    url: "/PurchaseOrderHeads/GetPurchaseOrderHeadsAsync",
                    onChange: function (value) {
                        if (value == "") {
                            $purchaseorderdetailsdg.datagrid("removeFilterRule", "PurchaseOrderHeadId");
                        } else {
                            $purchaseorderdetailsdg.datagrid("addFilterRule", {
                                field: "PurchaseOrderHeadId",
                                op: "equal",
                                value: value
                            });
                        }
                        $purchaseorderdetailsdg.datagrid("doFilter");
                    }
                }
            },
        ]);

    });
    //datagrid CRUD method
    var purchaseorderdetails_editIndex = undefined;
    //取消
    function purchaseorderdetails_reject() {
		$purchaseorderdetailsdg.datagrid("rejectChanges");
		purchaseorderdetails_editIndex = undefined;
    }
    //重新加载数据
    function purchaseorderdetails_reload() {
			if (endEditing()) {
				$purchaseorderdetailsdg.datagrid("reload");
			}
	}
    //关闭编辑状态
	function purchaseorderdetails_endEditing() {
			if (purchaseorderdetails_editIndex === undefined) {
                return true; 
            }
			if ($purchaseorderdetailsdg.datagrid("validateRow", purchaseorderdetails_editIndex)) {
 
								$purchaseorderdetailsdg.datagrid("endEdit", purchaseorderdetails_editIndex);
				purchaseorderdetails_editIndex = undefined;
                return true;
			} else {
				return false;
			}
		}
    //单击列开启编辑功能
	function purchaseorderdetails_onClickCell(index, field) {
			var _operates = ["_operate1", "_operate2", "_operate3", "ck"];
			if ($.inArray(field, _operates) >= 0) {
				return false;
			}
			if (purchaseorderdetails_editIndex !== index) {
				if (purchaseorderdetails_endEditing()) {
					$purchaseorderdetailsdg.datagrid("selectRow", index)
							.datagrid("beginEdit", index);
                    purchaseorderdetails_editIndex = index;
					var ed = $purchaseorderdetailsdg.datagrid("getEditor", { index: index, field: field });
					if (ed) {
						($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
					}
				} else {
					$purchaseorderdetailsdg.datagrid("selectRow", purchaseorderdetails_editIndex);
				}
			}
		}
        //新增记录
    function purchaseorderdetails_append() {
			if (purchaseorderdetails_endEditing()) {
				//对必填字段进行默认值初始化
				$purchaseorderdetailsdg.datagrid("insertRow", 
                               { index: 0,
                                  row: {
                                      Spec: '-',
                                      Model: '-',
                                      Unit: 'EA',
                                      Price: 0,
                                      Qty: 1,
                                      Amount: 1,
                                      OrderNo:orderno,
                                      PurchaseOrderHeadId:purchaseorderheadid
                                  }
                                });
				purchaseorderdetails_editIndex = 0;
				$purchaseorderdetailsdg.datagrid("selectRow", purchaseorderdetails_editIndex)
						.datagrid("beginEdit", purchaseorderdetails_editIndex);
			}
		}
    //删除编辑的行
	function purchaseorderdetails_removeit() {
		if (purchaseorderdetails_editIndex !== undefined) {  
			$purchaseorderdetailsdg.datagrid("cancelEdit", purchaseorderdetails_editIndex)
					           .datagrid("deleteRow", purchaseorderdetails_editIndex);
			purchaseorderdetails_editIndex = undefined;
        }
	}
    //删除选中的行
    function purchaseorderdetails_deletechecked() {
            var rows = $purchaseorderdetailsdg.datagrid("getChecked");
            if (rows.length > 0) {
                var id = rows.map(item => {
                    return item.Id;
                });
                $.messager.confirm("确认", "你确定要删除这些记录?",result => {
                    if (result) {
                        $.post("/PurchaseOrderDetails/DeleteCheckedAsync", { id: id })
                         .done(response => {
                            if (response.success) {
                                $purchaseorderdetailsdg.datagrid("reload");
                            } else {
                                $.messager.alert("错误", response.err,"error");
                            }
                         });
                    }
                });  
            } else {
                $.messager.alert("提示", "请先选择要删除的记录!");
            }
      }
    //提交保存后台数据库
	function purchaseorderdetails_accept() {
			if (purchaseorderdetails_endEditing()) {
				if ($purchaseorderdetailsdg.datagrid("getChanges").length) {
					var inserted = $purchaseorderdetailsdg.datagrid("getChanges", "inserted");
					var deleted = $purchaseorderdetailsdg.datagrid("getChanges", "deleted");
					var updated = $purchaseorderdetailsdg.datagrid("getChanges", "updated");
					var item = new Object();
					if (inserted.length) {
						item.inserted = inserted;
					}
					if (deleted.length) {
						item.deleted = deleted;
					}
					if (updated.length) {
						item.updated = updated;
					}
					//console.log(JSON.stringify(item));
					$.post("/PurchaseOrderDetails/SaveDataAsync", item)
                     .done(response => {
						//console.log(response);
						if (response.success) {
							$.messager.alert("提示", "提交成功!");
							$purchaseorderdetailsdg.datagrid("acceptChanges");
							$purchaseorderdetailsdg.datagrid("reload");
						} else {
                           $.messager.alert("错误", response.err ,"error");
                        }
					  })
                      .fail((jqXHR, textStatus, errorThrown) => {
						//console.log(errorThrown);
						$.messager.alert("错误", "提交错误了!" + errorThrown,"error");

					  });
				}
			}
		}       
</script>


 